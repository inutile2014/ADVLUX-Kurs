#nichetoknow
time ps -fea
#Zeigt die Zeit des Ausführung des Prozesses

man 2 alarm
#alarm = gibt die zeit aus wenn man auf ein Signal wartet

ls -l ordner1/ > ordner2/testfile2.txt
#erstellt ein File oder leitet den output weiter

echo$?
#gibt den output der letzten Meldung

less
#Zeigt inhalt von Datei

ls -l ordner1/foo 2> ordner2/fehlerliste.txt
#Erstellt ein Errorlog. Wichtig hier 2>

sum filename
#Gibt Bytes des Files aus

echo "scale=300; 4*a(1)" | bc -l
#mit dem befehl scale gibt es die stellen nach dem Komma aus. 4*a(1) berechnet pi
der befehl bc ist ein calculator

objekt | funkion-> pipe ist wichtig. Ansonsten wird sie nicht übergeben
# Es kann ein Wert generiert werden und via pipe | an eine funktion übergeben werden.

ls | wc -l
#zählt inhalt in einem Verzeichnis

ln -s /dir/file /dir2/file2
#Verlinkt sie untereinander

tar -cf -(zip das Verzeichnis) bedingung *(Stern alle files aus dem Verzeichnis) | (cd /ordner; tar -xf -)
#verschieben inhalt von verzeichnis a zu verzeichnis b

dd if=/dev/zero of=10mFile bs=1024k count=10
#dd Spiegelt Datei if=source welche gelsesen werden muss OF=path/filename bs=Grösse count=Grösse Files

du -sh path
#grösse von Verzeichnis

find verzeichnis | cpio -p /wunschverzeichnis
#man kopiert inhalt von verzeichnis inkl. Sym und Hardlinks

Zeichen*(alle Wörter welche dies beinhalten).*(Platzhalter punkt-Stern)



#GREP + sed
grep foo << edf
#Sucht bis edf(input) kommt. edf ist hier die sogennante "Marke"

cat(concatenate)
#gleiche Aufgabe wie more oder less

grep 3 grepexample.txt
#findet das Zeichen im beispiel oben die Zahl 3 in einem file(grepexample)

egrep "(wort1 | wort2)" datei.txt
#findet die gesuchen Worte in einer Textdatei.Er findet es auch wenn nur 1 Wort vorkommt

grep -E '\<(.+{7,7})\>.*\1' datei.txt
#Ein wort finden welche 7 Buchstaben hat

grep '\(.\)\1.*\(.\)\2' datei.txt | wc -l
# (.\) -> nimmt ein wort in den Speicher  1.* -> Beliebiges Zeichen  wc-l -> berechnet Inhalt welcher Match

ifconfig | grep 'inet ' | sed -e 's/^ *inet //' -e 's/ .*//'
# Anweisung | grep finde wort | sed-> zeigt Wort an aus einem File -e -> bei mehreren Anweisungen 's/ -> substution vor *wort  //-> schneidet alles weg



#AWK
awk
#awk ist eine Skriptsprache zum Editieren und Analysieren von Texten

#awk -> zählt alle wörter und gibt die Anzahl des wortes aus Befehl: awk -E namedesscriptes.awk datei.txt
Beginn
{
        for(i=1;i<=NF;i++)
                num[$i]++
}
End

{
        for(word in num)
                print word, num[word]

}

#awk wort in einem Logfile suchen
#!/usr/bin/awk


/Invalid user/i { bad++ }

END{
        print bad, " bad request"
}

#Die Logik wie ein User gesucht wird beim Login
getent passwd username

#id -> Listet Gruppen auf welche benutzer mitglied ist
id

#finger komplette informationen von User
finger username

#C-> Prozess generieren

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>


void main() {
   pid_t pid = 0;

   printf("parent here\n");

   pid = fork();
        if(pid == 0){

        printf("child here %d\n", pid);
        sleep(30);
}
   printf("i'm here %d\n", pid);

}


#Nice -> Priorität geben für ein Prozess
#Negative Nicezahlen haben eine hohe priorität. Positive Nicezahlen haben eine tiefe Priorität
Startet Prozess mit Tiefer Prio: nice  ps -l
Verändern von Einem Prozess:  renice [Priorität welceh man geben möchte] ProzessNR

#Service Suchen ob er gestartet ist
journalctl -t ServiceName

#cronjob
* * * * *
min H MtD Mt D
#Beispiel Verzeichnis 1 mal am Tah grösse Prüfen
#Erstellen des Jobs: 
crontab -e (Alle werden in die gleiche Liste )
0 0-23 * * * df -h /home/kurs3
#/etc/globalecrontab
#Können alles crontabs editiert werden


#at
#ist eine Verarbeitung welche Sporadisch funktioniert. Könnte als reminder benutzt werden
Befehl: at [Zeitangabe] -[Enter]
#Gewünschter Text eingeben
#ctrl D um zu beenden

#Packet zusammenstellen
#Paket via wget downloaden
# entpaken tar xf packet
# ./configure #alle Module die man möchte(./configure --with_Modulexyz)
#Compilieren -> make j(anzahl cores)
#installieren -> make install

#in sudo gruppe hinzufügen
#visudo eingeben
# auf die Zeile root gehen
#benutzer einfügen

# curl URL transfer
curl www.example <comand>

#file download von Seite wget
wget http://nginx.org/download/nginx-1.9.15.tar.gz



#Shell Script

#Skripts vergleichen diff./
diff script.sh script2.sh

#variablelänge
echo${#variable}

#Comands ausführen
#{Comands:}
{
date
ps
}

#Funktionen
function Myfunction (ls -l $* | grep name)

#!/bin/bash

echo 'Gibt deine Temp ein: '
read temp #Variable definiert
if (($temp < 20));
        then
         echo'Zu kalt'
elif (($temp > 30));
        then
          echo 'Zu warm'
else
        echo 'tip top'
fi


#for Schlaufe
for Myname in Mywortlist
        do
                comand
        done
#while
while
kommando-liste1
do
kommando-liste2
done

#case
case wort
in
muster1) kommando-liste1 ;;
...)
...;;
esac

#select -> Wenn eine Menuauswahl erstellt werden muss
select name in wortliste
do
kommando-liste
done
$ select i in list
> do
>
case $i in
>
list)
>
copy)
>
del)
>
print)
>
quit)
>
esac
> done
1) list
2) copy
3) del
4) print
5) quit
#? #eingabe von User

#array
array=(A zelle Böllä schellä)
$ echo ${array[1]}
zelle
$ echo ${array[*]}
A zelle Böllä schell

#array erweitern
array=(${array[@]} d\’Chatz gaht uf Walliselä)
echo ${array[*]}
zelle Böllä schellä d’Chatz gaht uf Walliselä

#Eingabe von user weiter verwenden read -> Read wird mit crtl D abgebroche
$ while read Variablename -r line
> do
>
echo ”>> $Variablename”
> done
Eine Zeile
>> Eine Zeil

#bei Shell ist der test befehl gleich boolen
test -d /tmp;echo $?
test -f /tmp/foo;echo $?
test ”$HOME” = /home/rat;echo $?
ZAHL=5
test ”$ZAHL” -eq 5;echo $?

#Ausführbarkeit Testen
#!/bin/bash

echo -n 'Gib eine Dateiverzeichnis an: '
read file

echo -n 'Datei $file ist'
test -f $file && echo 'vorhanden ' || echo -n 'nicht vorhanden'
test -r $file && echo 'lesen ' || echo -n 'nicht lesbar'
test -x $file && echo 'ausführbar ' || echo -n 'nicht ausführbar'
echo


#SET Ohne Argumente werden alle settings, Variablen und Funk onen der aktuellen Shell aufgelistet.
$ set -o
braceexpand
noclobber
ignoreeof
...
on
off
off

#Mit set debuggen
set -x
#debuggin beenden
set +x

#shif – Positionelle Parameter verschieben.

#trap
#trap – Signalbehandlung in der Shell
$ trap ’echo ”Wuff! Wuff!”’ 2
$ Drückt <CTRL>C
Wuff! Wuff!


#Monitoring
#filemonitoring Script
#!/bin/bash


# Variablen
HW=20 #Schwellwert
HOST=$(hostname)

# Funktionen
function warnung {
        echo "$Host: Partition: $1 / Mounted on: $3 / Belegt: $2"
        mail -s “Filemonitoring” mail@mail.com
}
################################### MAIN ##################################
df -h | while read df ; do
        case $df in
                /dev/*) set $df
                        proz=${5%\%}
                        if (( $proz > $HW )) ; then
                                warnung $1 $5 $6
                        fi
                        ;; #abschluss des Blockes
                     *) ;;
        esac
done


